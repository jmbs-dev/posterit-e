AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  posterit-e-lambdas: Serverless backend for the Posterit-E digital legacy platform.

Globals:
  Function:
    Timeout: 10
    MemorySize: 128
    Runtime: python3.9
    Architectures:
      - x86_64
    Environment:
      Variables:
        DYNAMODB_TABLE_NAME: "{{resolve:ssm:/posterite/dynamodb_table:1}}"
        S3_BUCKET_NAME: "{{resolve:ssm:/posterite/s3_bucket:1}}"
        SENDER_EMAIL_ADDRESS: "{{resolve:ssm:/posterite/sender_email:1}}"
        BASE_URL: "{{resolve:ssm:/posterite/base_url:1}}"
        TOKEN_TTL_SECONDS: "{{resolve:ssm:/posterite/token_ttl:1}}"
        OTP_TTL_SECONDS: "{{resolve:ssm:/posterite/otp_ttl:1}}"
        OTP_URL_BASE: "{{resolve:ssm:/posterite/otp_url_base:1}}"

Resources:
  # --- API Gateway ---
  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/api-gateway/posterit-e-mvp-api
      RetentionInDays: 7

  PosteritEApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'POST, GET, OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'" # Production Recommended: "'{{resolve:ssm:/posterite/frontend_url:1}}'"
      AccessLogSetting:
        DestinationArn: !GetAtt ApiGatewayLogGroup.Arn
        Format: '{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","caller":"$context.identity.caller","user":"$context.identity.user","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath","status":"$context.status","protocol":"$context.protocol","responseLength":"$context.responseLength"}'
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          LoggingLevel: INFO
          DataTraceEnabled: true
          MetricsEnabled: true

  # --- Lambda Functions ---
  StoreSecretLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/store_secret_lambda/
      Handler: app.lambda_handler
      Policies:
        - DynamoDBWritePolicy:
            TableName: "{{resolve:ssm:/posterite/dynamodb_table:1}}"
        - S3WritePolicy:
            BucketName: "{{resolve:ssm:/posterite/s3_bucket:1}}"
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /secrets
            Method: post
            RestApiId: !Ref PosteritEApi
            Auth:
              ApiKeyRequired: true

  ActivationLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/activation_lambda/
      Handler: app.lambda_handler
      Environment:
        Variables:
          RELEASE_LAMBDA_ARN: !GetAtt ReleaseLambdaFunction.Arn
          SCHEDULER_ROLE_ARN: !GetAtt SchedulerToLambdaRole.Arn
      Policies:
        - Statement:
            - Sid: AllowReadAndUpdateStateInDynamoDB
              Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:UpdateItem
              Resource: "{{resolve:ssm:/posterite/dynamodb_table_arn:1}}"
            - Sid: AllowSendEmails
              Effect: Allow
              Action:
                - ses:SendEmail
                - ses:SendRawEmail
              Resource: "{{resolve:ssm:/posterite/ses_identity_arn:1}}"
            - Sid: AllowCreateEventBridgeSchedule
              Effect: Allow
              Action: scheduler:CreateSchedule
              Resource: '*'
            - Sid: AllowPassSchedulerRole
              Effect: Allow
              Action: iam:PassRole
              Resource: !GetAtt SchedulerToLambdaRole.Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /activation/{secretId}
            Method: get
            RestApiId: !Ref PosteritEApi
        PostEvent:
          Type: Api
          Properties:
            Path: /activation
            Method: post
            RestApiId: !Ref PosteritEApi

  CancellationLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/cancellation_lambda/
      Handler: app.lambda_handler
      Policies:
        - Statement:
            - Sid: AllowReadAndUpdateStateForCancellation
              Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:UpdateItem
              Resource: "{{resolve:ssm:/posterite/dynamodb_table_arn:1}}"
            - Sid: AllowSendEmails
              Effect: Allow
              Action:
                - ses:SendEmail
                - ses:SendRawEmail
              Resource: "{{resolve:ssm:/posterite/ses_identity_arn:1}}"
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /cancel
            Method: post
            RestApiId: !Ref PosteritEApi

  ReleaseLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/release_lambda/
      Handler: app.lambda_handler
      Policies:
        - S3ReadPolicy:
            BucketName: "{{resolve:ssm:/posterite/s3_bucket:1}}"
        - Statement:
            - Sid: AllowManageStateAndTokensInDynamoDB
              Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
              Resource: "{{resolve:ssm:/posterite/dynamodb_table_arn:1}}"
            - Sid: AllowSendEmails
              Effect: Allow
              Action:
                - ses:SendEmail
                - ses:SendRawEmail
              Resource: "{{resolve:ssm:/posterite/ses_identity_arn:1}}"
      Events:
        VerifyMfaEvent:
          Type: Api
          Properties:
            Path: /mfa/verify
            Method: post
            RestApiId: !Ref PosteritEApi
        GetSecretDataEvent:
          Type: Api
          Properties:
            Path: /secrets/{secretId}/data
            Method: get
            RestApiId: !Ref PosteritEApi

  # --- IAM Roles and Custom Domain ---
  SchedulerToLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: scheduler.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowInvokeReleaseLambda
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt ReleaseLambdaFunction.Arn

  PosteriteEApiDomainName:
    Type: AWS::ApiGateway::DomainName
    DeletionPolicy: Retain
    Properties:
      DomainName: "{{resolve:ssm:/posterite/api_domain:1}}"
      EndpointConfiguration:
        Types:
          - REGIONAL
      RegionalCertificateArn: "{{resolve:ssm:/posterite/certificate_arn:1}}"

  PosteriteEApiBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn: PosteritEApiProdStage
    Properties:
      DomainName: !Ref PosteriteEApiDomainName
      RestApiId: !Ref PosteritEApi
      Stage: Prod
      BasePath: ""

Outputs:
  PosteritEApiUrl:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${PosteritEApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  PosteritEApiId:
    Description: "API Gateway REST API ID"
    Value: !Ref PosteritEApi