AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  posterit-e-lambdas: Serverless backend for the Posterit-E digital legacy platform.
  This template uses pre-existing S3 and DynamoDB resources and defines granular IAM roles.

Parameters:
  PosteritETableName:
    Type: String
    Description: The name of the existing DynamoDB table for secrets.
    Default: PosteritETable
  PosteritES3BucketName:
    Type: String
    Description: The name of the existing S3 bucket for encrypted secrets.
    Default: posterite
  SESIdentityArn:
    Type: String
    Description: The ARN of the verified SES identity (domain or email) for sending emails.

Globals:
  Function:
    Timeout: 10
    MemorySize: 128
    Runtime: python3.9
    Architectures:
      - x86_64
    Environment:
      Variables:
        DYNAMODB_TABLE_NAME: !Ref PosteritETableName
        S3_BUCKET_NAME: !Ref PosteritES3BucketName

Resources:
  PosteritEApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'POST, GET, OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

  StoreSecretLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/store_secret_lambda/
      Handler: app.lambda_handler
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref PosteritETableName
        - S3WritePolicy:
            BucketName: !Ref PosteritES3BucketName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /secrets
            Method: post
            RestApiId: !Ref PosteritEApi
            Auth:
              ApiKeyRequired: true

  ActivationLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/activation_lambda/
      Handler: app.lambda_handler
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref PosteritETableName
          S3_BUCKET_NAME: !Ref PosteritES3BucketName
          SENDER_EMAIL_ADDRESS: "noreply@POSTERITE.RUN.PLACE"
          RELEASE_LAMBDA_ARN: !GetAtt ReleaseLambdaFunction.Arn
          SCHEDULER_ROLE_ARN: !GetAtt SchedulerToLambdaRole.Arn
      Policies:
        - Statement:
            - Sid: AllowReadAndUpdateStateInDynamoDB
              Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:UpdateItem
              Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${PosteritETableName}
            - Sid: AllowSendActivationEmail
              Effect: Allow
              Action: ses:SendEmail
              Resource: !Ref SESIdentityArn
            - Sid: AllowCreateEventBridgeSchedule
              Effect: Allow
              Action: scheduler:CreateSchedule
              Resource: '*'
            - Sid: AllowPassSchedulerRole
              Effect: Allow
              Action: iam:PassRole
              Resource: !GetAtt SchedulerToLambdaRole.Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /activation/{secretId}
            Method: get
            RestApiId: !Ref PosteritEApi
        PostEvent:
          Type: Api
          Properties:
            Path: /activation
            Method: post
            RestApiId: !Ref PosteritEApi

  CancellationLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/cancellation_lambda/
      Handler: app.lambda_handler
      Policies:
        - Statement:
            - Sid: AllowReadAndUpdateStateForCancellation
              Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:UpdateItem
              Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${PosteritETableName}
            - Sid: AllowSendCancellationEmail
              Effect: Allow
              Action: ses:SendEmail
              Resource: !Ref SESIdentityArn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /cancel
            Method: post
            RestApiId: !Ref PosteritEApi

  ReleaseLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/release_lambda/
      Handler: app.lambda_handler
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref PosteritES3BucketName
        - Statement:
            - Sid: AllowManageStateAndTokensInDynamoDB
              Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
              Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${PosteritETableName}
            - Sid: AllowSendMfaAndReleaseEmails
              Effect: Allow
              Action: ses:SendEmail
              Resource: !Ref SESIdentityArn
      Events:
        VerifyMfaEvent:
          Type: Api
          Properties:
            Path: /mfa/verify
            Method: post
            RestApiId: !Ref PosteritEApi
        GetSecretDataEvent:
          Type: Api
          Properties:
            Path: /secrets/{secretId}/data
            Method: get
            RestApiId: !Ref PosteritEApi

  # ===============================================================
  # API Key and Usage Plan
  # ===============================================================
  MyApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: PosteritE-Client-Key
      Description: API Key for the Posterit-E client application
      Enabled: true

  MyUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: PosteritE-Usage-Plan
      Description: Usage plan for the Posterit-E client

  MyUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref MyApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref MyUsagePlan

  SchedulerToLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: posterit-e-scheduler-to-lambda
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: scheduler.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowInvokeReleaseLambda
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt ReleaseLambdaFunction.Arn

Outputs:
  PosteritEApiUrl:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${PosteritEApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"